version: '3.8'

services:
  triton-server:
    image: nvcr.io/nvidia/tritonserver:23.10-py3
    container_name: triton-server
    ports:
      - "8000:8000"  # HTTP
      - "8001:8001"  # gRPC
      - "8002:8002"  # Metrics
    volumes:
      - ./models/model_repository:/models
      - ./logs:/logs
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    command: >
      tritonserver
      --model-repository=/models
      --allow-http=true
      --allow-grpc=true
      --allow-metrics=true
      --strict-model-config=false
      --log-verbose=1
      --log-file=/logs/triton.log
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - image-recognition-network

  fastapi-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: fastapi-client
    ports:
      - "8080:8080"
    environment:
      - TRITON_URL=triton-server:8001
      - HOST=0.0.0.0
      - PORT=8080
      - LOG_LEVEL=INFO
      - MAX_BATCH_SIZE=16
      - BATCH_TIMEOUT=0.1
      - MAX_QUEUE_SIZE=100
      - CONFIDENCE_THRESHOLD=0.5
      - NMS_THRESHOLD=0.4
      - MAX_FILE_SIZE=10485760  # 10MB
    depends_on:
      triton-server:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - image-recognition-network

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - image-recognition-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - image-recognition-network
    profiles:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:

networks:
  image-recognition-network:
    driver: bridge 
# Multi-stage FastAPI Client Dockerfile for production deployment
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements first for better Docker layer caching
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development
ENV DEBUG=1
COPY . .
RUN chown -R appuser:appuser /app
USER appuser
CMD ["python", "-m", "app.main"]

# Production stage
FROM base as production

# Copy application code
COPY app/ ./app/
COPY setup_model.py .

# Create necessary directories with proper permissions
RUN mkdir -p logs models && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables for production
ENV PYTHONPATH=/app \
    DEBUG=0

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the application in local mode (no Triton server needed)
WORKDIR /app/app
CMD ["python", "local_main.py"] 